# -*- coding: utf-8 -*-
"""Metropolis Hasting for Vertex Cover.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yvJ8eYXuIa0ztiM0R4pybLetuWW0e6SD
"""

import numpy as np
import random

graph = {0:[1,2,3,4],
         1: [0],
         2: [0],
         3: [0],
         4: [0]}

def cost(G,S):
  return len(G.keys()) - len(S[1])

def soln(G,S):
  soln_list = []
  for i in G.keys():
    if S[0][i]==1:
      M = S[0].copy()
      D = S[1].copy()
      D.append(i)
      M[i]=0
      for j in G[i]:
        M[j]=0
      soln_list.append((M,D))
    if i in S[1]:
      M = S[0].copy()
      D = S[1].copy()
      D.remove(i)
      M[i]=1
      for j in G[i]:
        if j not in S[1]: M[j] = 1
      soln_list.append((M,D))
  return random.choice(soln_list)

def metro(G,k,T,nsteps):
  S = (np.ones(len(G.keys())),[])

  for t in range(nsteps):
    S1 = soln(G,S)
    if cost(G,S1) <= cost(G,S): S = (S1[0].copy(),S1[1].copy())
    else:
      delta = cost(G,S1) - cost(G,S)
      r = np.random.uniform(0,1)
      if r < np.exp(-delta/(k*T)): S = (S1[0].copy(),S1[1].copy())

  return S

metro(graph,10,100,1000)

